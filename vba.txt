

### 1. **Configuration du Formulaire VBA (UserForm)**

Créez un formulaire utilisateur (UserForm) dans l'éditeur VBA avec les contrôles suivants :
- `txtFirstName` : TextBox pour le prénom.
- `txtLastName` : TextBox pour le nom.
- `txtAge` : TextBox pour l'âge.
- `txtEmploymentDate` : TextBox pour la date d'emploi.
- `txtPosition` : TextBox pour le poste.
- `txtEmployeeID` : TextBox pour l'ID employé (utilisé lors de la mise à jour et suppression).
- Boutons : 
  - `btnCreate`
  - `btnRead`
  - `btnUpdate`
  - `btnDelete`
  - `btnSearch`
  - `btnImport`

### 2. **Code VBA pour la gestion CRUD**

#### 2.1 Connexion à la base de données Access

```vba
Dim conn As Object
Dim rs As Object

Sub OpenConnection()
    On Error GoTo ErrHandler
    Set conn = CreateObject("ADODB.Connection")
    conn.Open "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Path\To\Your\EmployeesDB.accdb;"
    Exit Sub

ErrHandler:
    MsgBox "Error opening connection: " & Err.Description, vbCritical
End Sub

Sub CloseConnection()
    On Error Resume Next
    If Not conn Is Nothing Then conn.Close
    Set conn = Nothing
    On Error GoTo 0
End Sub
```

#### 2.2 Création (Create)

```vba
Sub btnCreate_Click()
    Call OpenConnection

    Dim sql As String
    sql = "INSERT INTO Employees (FirstName, LastName, Age, EmploymentDate, Position) " & _
          "VALUES ('" & Replace(txtFirstName.Value, "'", "''") & "', '" & Replace(txtLastName.Value, "'", "''") & "', " & _
          txtAge.Value & ", #" & Format(txtEmploymentDate.Value, "mm/dd/yyyy") & "#, '" & Replace(txtPosition.Value, "'", "''") & "')"

    conn.Execute sql
    MsgBox "Employee added successfully!", vbInformation

    Call CloseConnection
End Sub
```

#### 2.3 Lecture (Read)

```vba
Sub btnRead_Click()
    Call OpenConnection

    Dim sql As String
    sql = "SELECT * FROM Employees"
    
    Set rs = conn.Execute(sql)
    
    Dim row As Integer
    row = 2 ' Suppose que les en-têtes sont dans la ligne 1
    
    Do While Not rs.EOF
        Cells(row, 1).Value = rs("EmployeeID")
        Cells(row, 2).Value = rs("FirstName")
        Cells(row, 3).Value = rs("LastName")
        Cells(row, 4).Value = rs("Age")
        Cells(row, 5).Value = rs("EmploymentDate")
        Cells(row, 6).Value = rs("Position")
        row = row + 1
        rs.MoveNext
    Loop
    
    Call CloseConnection
End Sub
```

#### 2.4 Mise à jour (Update)

```vba
Sub btnUpdate_Click()
    Call OpenConnection

    Dim sql As String
    sql = "UPDATE Employees SET FirstName='" & Replace(txtFirstName.Value, "'", "''") & _
          "', LastName='" & Replace(txtLastName.Value, "'", "''") & "', Age=" & txtAge.Value & _
          ", EmploymentDate=#" & Format(txtEmploymentDate.Value, "mm/dd/yyyy") & "#, Position='" & Replace(txtPosition.Value, "'", "''") & _
          "' WHERE EmployeeID=" & txtEmployeeID.Value

    conn.Execute sql
    MsgBox "Employee updated successfully!", vbInformation

    Call CloseConnection
End Sub
```

#### 2.5 Suppression (Delete)

```vba
Sub btnDelete_Click()
    If MsgBox("Are you sure you want to delete this employee?", vbYesNo + vbQuestion) = vbYes Then
        Call OpenConnection

        Dim sql As String
        sql = "DELETE FROM Employees WHERE EmployeeID=" & txtEmployeeID.Value

        conn.Execute sql
        MsgBox "Employee deleted successfully!", vbInformation

        Call CloseConnection
    End If
End Sub
```

#### 2.6 Recherche (Search)

```vba
Sub btnSearch_Click()
    Call OpenConnection

    Dim sql As String
    sql = "SELECT * FROM Employees WHERE LastName LIKE '%" & Replace(txtLastName.Value, "'", "''") & "%'"
    
    Set rs = conn.Execute(sql)
    
    If rs.EOF Then
        MsgBox "No employee found with that last name.", vbExclamation
    Else
        txtEmployeeID.Value = rs("EmployeeID")
        txtFirstName.Value = rs("FirstName")
        txtLastName.Value = rs("LastName")
        txtAge.Value = rs("Age")
        txtEmploymentDate.Value = rs("EmploymentDate")
        txtPosition.Value = rs("Position")
    End If
    
    Call CloseConnection
End Sub
```

#### 2.7 Importer un fichier Excel

```vba
Sub btnImport_Click()
    Dim ws As Worksheet
    Set ws = Application.Workbooks.Open("C:\Path\To\Your\File.xlsx").Sheets(1)

    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row

    Dim i As Integer
    For i = 2 To lastRow ' Suppose que les données commencent à la ligne 2
        txtFirstName.Value = ws.Cells(i, 1).Value
        txtLastName.Value = ws.Cells(i, 2).Value
        txtAge.Value = ws.Cells(i, 3).Value
        txtEmploymentDate.Value = ws.Cells(i, 4).Value
        txtPosition.Value = ws.Cells(i, 5).Value
        
        Call btnCreate_Click
    Next i

    MsgBox "Data imported successfully!", vbInformation
End Sub
```

### 3. **Ajout de fonctionnalités supplémentaires**

#### 3.1 Gestion des couleurs des boutons

```vba
Sub FormatControls()
    Dim btn As MSForms.CommandButton
    For Each btn In Me.Controls
        If TypeName(btn) = "CommandButton" Then
            If btn.Caption = "Create" Then
                btn.BackColor = RGB(0, 255, 0) ' Vert
            ElseIf btn.Caption = "Delete" Then
                btn.BackColor = RGB(255, 0, 0) ' Rouge
            End If
        End If
    Next btn
End Sub
```

#### 3.2 Barre de progression

```vba
Sub ShowProgress()
    Dim ws As Worksheet
    Set ws = Worksheets("EmployeeManagement")
    
    Dim totalSteps As Integer
    totalSteps = 100
    
    Dim i As Integer
    For i = 1 To totalSteps
        ws.Shapes("ProgressBar").Width = (i / totalSteps) * 200 ' Ajuster la largeur
        Application.Wait Now + TimeValue("00:00:01")
    Next i
    
    MsgBox "Operation completed!", vbInformation
End Sub
```

### 4. **Placement du code**
- **UserForm** : Placez tous les événements associés aux boutons (comme `btnCreate_Click`, `btnUpdate_Click`, etc.) dans le code du UserForm.
- **Modules** : Les sous-programmes `OpenConnection`, `CloseConnection`, et autres procédures générales peuvent être placés dans un module séparé ou dans le code du UserForm.

Avec ce code, vous avez un projet VBA complet pour gérer des employés avec une base de données Access, en utilisant des formulaires Excel et des fonctionnalités VBA avancées. Vous pouvez adapter et étendre ce code en fonction de vos besoins spécifiques.
